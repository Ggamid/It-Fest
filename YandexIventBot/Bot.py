import telebot # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
import requests
import vk_api # –≤–∫ api –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä—É –≤–∫
from telebot import types # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ—á–µ–∫
import time # –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—É–∑
from requests import get
from Sqlighter import Sqlighter # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Sqlighter —Å–æ–∑–¥–∞–Ω–Ω—ã–π –º–Ω–æ—é
from threading import Thread # –±–∏–±–ª–∏–æ—Ç–∫–µ–∞ –¥–ª—è –°–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ —á—Ç–æ–±—ã –±–æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
from datetime import date # –î–∞—Ç–∞
import datetime

token = "5248705269:AAF0vUzDRuf3nYV-M6Ur9OFnlQNyx_izGKY" # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
tokenVK = "fd98b0c9fd98b0c9fd98b0c984fde4b800ffd98fd98b0c99fd5c972905042d874946aa7" # —Ç–æ–∫–µ–Ω –≤–∫ –ø—Ä–æ—Å—å–±–∞ –Ω–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!!!
version = 5.131
domain = "nauchim.online"
session = vk_api.VkApi(token=tokenVK)
vk = session.get_api()

current_data = str(date.today())[5:]
bot = telebot.TeleBot(token)
list_stiker = open("AnimatedStickerList.tgs", "rb")

dict_perfom = {1: ['–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å –¥–µ—Ç—Å–∫–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥', '#TechnoCom'],
               2: ['–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ¬´IT—Ñ–µ—Å—Ç¬ª', '#ITfest_2022'],
               3: ['–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –æ–±—â–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π', '#–§–µ—Å—Ç–∏–≤–∞–ª—å–û–ö–ö'],
               4: ['–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –Ω–µ–π—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ¬´–ù–µ–π—Ä–æ—Ñ–µ—Å—Ç¬ª', '#–ù–µ–π—Ä–æ—Ñ–µ—Å—Ç'],
               5: ['–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å –ø–æ –º–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏–∏ ¬´–ù–µ–≤–∏–¥–∏–º—ã–π –º–∏—Ä¬ª', '#–ù–µ–≤–∏–¥–∏–º—ã–π–ú–∏—Ä'],
               6: ['–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π –∫–æ–Ω–∫—É—Ä—Å –Ω–∞—É—á–Ω–æ–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏ —Ä–∞–±–æ—Ç', '#–ö–æ–Ω–∫—É—Ä—Å–ù–ò–†'],
               7: ['–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å', '#IASF2022'],
               8: ['–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å 3D–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è VRAR-Fest', '#VRARFest3D']}

stroka = ""
for i in range(1, len(dict_perfom)):
    stroka += dict_perfom[i][0] + " " + dict_perfom[i][1] + "\n" # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –≤—ã—Å—ã–ª–∞—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—ç–≥–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

identificator = 0


# Bot begin
@bot.message_handler(commands=['start', 'add_tag', 'remove_tag', 'change_sending']) # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
def start_message(message):
    global identificator
    if message.text == "/start":

        identificator = message.from_user.id  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –∫–æ–¥–µ
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

        support = types.KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚öôÔ∏è")  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        add_tag = types.KeyboardButton("/add_tag")
        remove_tag = types.KeyboardButton("/remove_tag")
        on_off = types.KeyboardButton("/change_sending")

        markup.add(support, add_tag, remove_tag, on_off) # –¥–∞–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–æ—á–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –∫—Ä–∏–ø–µ—Ç—å –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ

        send_mess = f"–°–∞–ª–∞–º {message.from_user.first_name}"
        sti = open("AnimatedSticker.tgs", "rb")
        bot.send_sticker(message.chat.id, sti)  # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
        bot.send_message(message.chat.id,
                         f'{send_mess}!, –Ø –±–æ—Çü§ñ, –ú–µ–Ω—è –∑–æ–≤—É—Ç YaNotifi! –∏ –º–æ—è —Ü–µ–ª—å —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è '
                         f'–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '
                         f'–ù–∞—É—á–∏–º Online‚ùïüì®'.format(message.from_user, bot.get_me()),
                         parse_mode='html', reply_markup=markup) # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫—Ä–µ–ø–∏–º –∫–Ω–æ–ø–∫–∏ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ

        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ üîß –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –æ–ø–∏—à—É –∏—Ö:  "
                                          "\n /change_sending - —Å –ø–æ–º–æ—â—å—é –Ω–µ–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫–ª—é—á–∞—Ç—å –∏ –≤–∫–ª—é—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                                          "\n /add_tag - —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∂–µ–ª–∞–µ–º—ã–µ —Ö—ç—à—Ç—ç–≥–∏ –∏ –±–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –∑–∞–ø–∏—Å—è—Ö —Å —Ç–∞–∫–∏–º —Ö—ç—à—Ç—ç–≥–æ–º "
                                          "\n /remove_tag - –±–ª–∞–≥–æ–¥–∞—Ä—è –µ–π —É–¥–∞–ª—è–π –±–æ–ª—å—à–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ö—ç—à—Ç—ç–≥–∏")

        Sqlighter.add_id(message.from_user.id) # –¥–∞–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–≥–æ –±–æ—Ç–∞ –≤ –ë–î




    elif message.text == "/add_tag": # –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª—è—é—â–∞—é —Ö—ç—à—Ç—ç–≥–∏ –≤ —Å–ø–∏—Å–æ–∫

        bot.send_message(message.chat.id, f"–í–∞—à –Ω—ã–Ω–µ—à–Ω–∏–π —Å–ø–∏—Å–æ–∫: \n{Sqlighter.get_tag(message.from_user.id)}")
        bot.send_message(message.chat.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—ç—à—Ç—ç–≥–∏: \n{stroka} \n –ö–∞–∫ –º–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–µ–ø—Ä–∞–≤–¥–∞ –ª–∏? –î—É–º–∞—é –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ—Ç —Ç–æ, —á—Ç–æ –µ–º—É –ø–æ –¥—É—à–µ!üòÅ")
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ö—ç—à—Ç—ç–≥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ üì•:")
        bot.send_message(message.chat.id, "YaNotifi, –î–æ–±–∞–≤—å —Ö—ç—à—Ç—ç–≥: #text")


    elif message.text == "/remove_tag": # –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª—è—é—â–∞—è —Ö—ç—à—Ç—ç–≥ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ö—ç—à—Ç—ç–≥–æ–≤
        bot.send_sticker(message.chat.id, list_stiker)
        bot.send_message(message.chat.id, f"–í–∞—à –Ω—ã–Ω–µ—à–Ω–∏–π —Å–ø–∏—Å–æ–∫: \n{Sqlighter.get_tag(message.from_user.id)}")
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å —Ö—ç—à—Ç—ç–≥ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è  üöÆ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:".format())
        bot.send_message(message.chat.id, "YaNotifi, –£–¥–∞–ª–∏ —Ö—ç—à—Ç—ç–≥: #text".format())



    elif message.text == "/change_sending": # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è


        identificator = message.from_user.id

        markup = types.InlineKeyboardMarkup(row_width=1)
        item_change_1 = types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å‚õîÔ∏è", callback_data="StopSending")
        item_change_2 = types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—åüì´", callback_data="ContinueSending")
        markup.add(item_change_1, item_change_2) # –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é

        bot.send_message(message.chat.id,
                         "–•–æ—Ç–∏—Ç–µ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π? - –Ω–∞–∂–º–∏—Ç–µ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å "
                         "\n –•–æ—Ç–∏—Ç–µ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π? - –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                         reply_markup=markup) # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª–µ–º—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏


@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == "private":
        if message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚öôÔ∏è": # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –≤–æ—Ç –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: "
                                              "\n –ì—Ä—É–ø–ø–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ù–∞—É—á–∏–º.online https://vk.com/nauchim.online "
                                              "\n –°–∞–π—Ç —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ https://www.–Ω–∞—É—á–∏–º.online")
        elif "YaNotifi, –î–æ–±–∞–≤—å —Ö—ç—à—Ç—ç–≥:" in message.text: # —Ç—É—Ç –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à—Ç—ç–≥–∞
            ls = []
            check = Sqlighter.add_tag_to_id(message.chat.id, find_teg_in_stroke(message.text, ls)[0])
            if check == "TAG –î–û–ë–ê–í–õ–ï–ù":
                bot.send_message(message.chat.id, "–¢—ç–≥ –î–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
            else:
                bot.send_message(message.chat.id, f"{check}, –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑")

        elif "YaNotifi, –£–¥–∞–ª–∏ —Ö—ç—à—Ç—ç–≥:" in message.text: # —Ç—É—Ç –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ö—ç—à—Ç—ç–≥–∞
            ls = []

            check = Sqlighter.remove_tag_from_id(message.chat.id, find_teg_in_stroke(message.text, ls)[0])
            if check == '–°–ü–ò–°–û–ö –•–≠–®–¢–≠–ì–û–í –ò–ó–ú–ï–ù–ï–ù':
                bot.send_message(message.chat.id, "–¢—ç–≥ –£–¥–∞–ª–µ–Ω ‚úÖ")
            else:
                bot.send_message(message.chat.id, f"{check}, –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑")
        else:
            bot.send_message(message.chat.id,
                             "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é ü§ñ.–ò—Å–ø–æ–ª—å–∑—É–π –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã!:"
                             " \n         /add_tag - –¥–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç—ç–≥ "
                             "\n         /change_sending - –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ\–≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ "
                             "\n         /remove_tag - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ö—ç—à—Ç—ç–≥–∞")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        global identificator
        if call.message: # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            # news
            if call.data == 'ContinueSending': # –æ–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                Sqlighter.change_sendind(identificator, 1) # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                # show alert
                if Sqlighter.change_sendind(identificator, 1) == "–ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù–´":
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                              text="–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—èüòå") # –∏ –≤—ã—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                else:
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                              text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü§î, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
            elif call.data == 'StopSending':
                Sqlighter.change_sendind(identificator, 0) # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                # show alert
                if Sqlighter.change_sendind(identificator, 0) == "–ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù–´":
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                              text="–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞üòå")

                else:
                    bot.answer_callback_query(callback_query_id=call.id, show_alert=True,
                                              text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ü§î, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")

    except Exception as e:
        print(repr(e))


def sender(): # –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—ç–≥–∞–º–∏
    try:
        list_user = Sqlighter.get_id_list() # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å Id –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç–µ–ª–µ–π
        list_post = GetInfo(domain) # –ø–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏

        while True:
            for i in list_user:
                list_tag = Sqlighter.get_tag(i)
                for tag in list_tag:
                    for post in list_post:
                        if tag in list_post[post][1] and list_post[post][0] and Sqlighter.check_post_in_sent_post(i, list_post[post][4]) == "–ú–æ–∂–Ω–æ –û—Ç–ø—Ä–∞–≤–∏—Ç—å" and list_post[post][3]: # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ö—ç—à—Ç—ç–≥, –Ω–∞ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Ç–æ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç —é–∑–µ—Ä—É —Ä–∞–Ω–µ–µ –∏–ª–∏ –Ω–µ—Ç.
                            bot.send_message(i, list_post[post][1]) # –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
                            Sqlighter.add_id_post_to_sent_post(i, list_post[post][4]) # –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –Ω–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç–ª—é
            time.sleep(1800)
    except TypeError as e:
        sender()
        print("Error", e)

#
t1 = Thread(target=sender) # —Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–æ –∏ —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–µ–ª –±–æ—Ç
t1.start() # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫


# Bot_end


def pars(domain):
    status = session.method("wall.get", {"domain": domain, "count": 50})  # –∑–∞–ø—Ä–æ—Å –≤ vk api –∑–∞–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ 50 –ø–æ—Å—Ç–∞—Ö

    return status


def GetInfo(domain): # –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–µ–π Pars
    data = pars(domain)  # –ù–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    data2 = data["items"]
    list_post_text = {}

    for i in range(0, len(data2)):  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ data2 —Ç–µ–∫—Å—Ç—ã –ø–æ—Å—Ç–æ–≤
        text_post = data2[i]["text"]
        text_data = float(data2[i]["date"])
        id_post = str(data2[i]["id"])
        img_post = None
        check_data = False

        value = datetime.datetime.fromtimestamp(text_data) # –ø–µ—Ä–µ–≤–æ–¥ UNIX –≤—Ä–µ–º–µ–Ω–∏
        date_post = value.strftime('%m-%d') # –¥–∞—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞

        if "attachments" in data2[i]:
            if data2[i]["attachments"][0]["type"] == "photo":
                img_post = data2[i]['attachments'][0]["photo"]["sizes"][4]["url"]

        if current_data == date_post: # –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø–æ—Å—Ç–∞ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Ç–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è True —ç—Ç–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            check_data = True

        list_post_text[i] = [date_post, text_post, img_post, check_data, id_post] # —Å–ª–æ–≤–∞—Ä—å –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ month-day, —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç, –∫–∞—Ä—Ç–∏–Ω–∫–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å), –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è chtck_data –∏ id –ø–æ—Å—Ç–∞

    return list_post_text


def GetText(domain):  # —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–æ—Å—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é find_tag –ò –æ–Ω–∞ –Ω–∞–π–¥–µ—Ç –≤—Å–µ —Ç—ç–≥–∏ –∏–∑ 40 –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    data = pars(domain)  # –ù–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    data2 = data["items"]
    list_post_text = []

    for i in range(0, len(data2)):  # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∏–∑ data2 —Ç–µ–∫—Å—Ç—ã –ø–æ—Å—Ç–æ–≤
        text_post = data2[i]["text"]
        list_post_text.append(text_post)

    return list_post_text


def send_post_Htag(text_hashtag, dict_info, id):  # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ —Å–ª–æ–≤–∞—Ä—é –∏ –∏—â–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –Ω—É–∂–Ω—ã–º–∏ —Ö—ç—à—Ç—ç–≥–∞–º–∏
    for i in range(0, len(dict_info)):
        print(dict_info([i][1]))
        if text_hashtag in dict_info[i][1] and dict_info[i][3] and (
                Sqlighter.check_post_in_sent_post(id, dict_info[i][4]) == "–ú–æ–∂–Ω–æ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"):

            list_for_send = [dict_info[i][1], dict_info[i][4]]

        else:
            list_for_send = ["—Ç–∞–∫–æ–≥–æ —Ç—ç–≥–∞ –Ω–µ—Ç", ""]
    return list_for_send


def find_teg(text, teg_list): # —Ñ—É–Ω–∫–∏—è –∏—â–µ—Ç –≤—Å–µ —Ö—ç—à—Ç—ç–≥–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ç–µ–∫—Å—Ç–∞
    index = 0
    for item in list:
        if "#" in item:
            for i in range(item.index('#'), len(item)):
                if item[i] == ' ' or i == (len(item) - 1):
                    teg_list.append(item[item.index('#'):i + 1])
                    index = i
                    break
        if item.count('#') > 1:
            find_teg(item[index:len(item)], teg_list)
    return teg_list


def find_teg_in_stroke(text, teg_list): # —Ñ—É–Ω–∫–∏—è –∏—â–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ —Ö—ç—à—Ç—ç–≥
    index = 0
    for i in range(text.index('#'), len(text)):
        if text[i] == ' ' or i == (len(text) - 1):
            teg_list.append(text[text.index('#'):i + 1])
            index = i
            break
    if text.count('#') > 1:  # sender()
        find_teg_in_stroke(text[index:len(text)], teg_list)
    return teg_list


t2 = Thread(target=bot.polling(none_stop=True))
t2.start()
